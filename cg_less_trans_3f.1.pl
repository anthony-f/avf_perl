#!/usr/bin/perl
# alter the shebang to correspond to the location of perl on your computer

# program name - CG_less_translation - translates CG-affected codons to null characters - see below
# copywrite (C) 2019 Anthony V. Furano, avf@helix.nih.gov or avf_1@mac.com
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 see
# <https://www.gnu.org/licenses/>
# This program comes with ABSOLUTELY NO WARRANTY

# start program by typing from the (unix) terminal command line
# perl cg_less_trans.3f.pl *.fst where *.fst is the name of the input file (e.g., test_in.fst)

use strict;
use warnings;


#if the name of the input file is test_in.fst, the output file is test-cg-null.fst
#the "O" can be changed to the missing data symbol "-" sed 's/O/-/g' test-cg-null.fst > test-cg-null.1.fst

# see accompanying *.txt for additional details and rationale

# the below variables are declared outside of the following foreach loop because they are called 
# either by the subroutines or code outside of the aforesaid foreach loop


my $cn_name = '';	#name of the sequence present in $input
my $string = '';	#>name<sequence (either DNA or pep) of @input <- first one is DNA seq the rest are pep
my $pep_strng = ''; #>name<seq
my $cn_jj = '';		#$cn_jj_seq string which will be passed to the get_val subroutine;
                    #consensus seq wherein CGs replace by JJs
		
my @cdn_val = ();	#array of codon values generated by get_val subroutine by %cg_less_cdn_hash_a
my $cdn_val = '';	#element (i.e, value, which = amino acid or null char O) of @cdn_val
my $cdn_strng = ''; #scalar (string) version of @cdn_val
my $cdn_strng_len = '';

my @index = ();		#positions of the CG-affected codons
my $index =  '';	#element of @index

my $orth_name = '';
my $orth_strng = '';

my @peps = ();		#cc_peps w null "O" values for CG-affected codons
my $peps = '';		#element of @pep

my @cns = ();	#holds name and translated string of the consensus sequence

#### IN THE FOLLOWING CODE THE USER GLOBS THE FILES ON THE COMMAND LINE WHEN STARTING THE PROGRAM

#perl cg_less_trans.3f.pl *.fst - all of these files are held in @ARGV

#the below variables have to be declared outside of the following foreach loop because they are called 
# either by the subroutines or code outside of the aforesaid foreach loop

my $msf_filename = '';	

#~

my @input = ();		

foreach (@ARGV){	
	
	@cns = ();	#initialize for each file
					 
	@peps = ();	#initialize for each file
	
	print "\nthe \.fst file is: $_\n";
	
	$msf_filename = $_;

	#check that the file exists

	unless (-e $msf_filename){
		
		print "\nCannot find  \"$msf_filename\" \n\n";

		exit;
		}


	unless (open(MSFFILE, $msf_filename)){
	
		print "\nCannot open \"$msf_filename\"\n\n";	exit;
		}

	@input = <MSFFILE>;

	close MSFFILE;

#### PROCESS INPUT AND THE CONSENSUS SEQUENCE

my $input = join('<', @input);	#joins the elements of the array into one string separated by <
								#>name1\n<seq1\n<seq\n>name2
my $orth_n = ''; #incremented every time an orth-containing seq is processed

$input =~ s/\n+//g;					

my @seqs = split (/(?=>)/, $input); 
								 
$string = shift(@seqs);		


while ($string =~ m/>(.*?)<(\w.*)/ig) {
		$cn_name = $1;
		$cn_jj = $2;
		# change CG to JJ
		$cn_jj =~ s/CG/JJ/g;
		#remove <
		$cn_jj =~ s/<//g;
											 
		@cdn_val = get_val($cn_jj); 
									 
		my $cdn_val_elements = scalar(@cdn_val); 
												 
		print "\nthe number of elements in \@cdn_val is $cdn_val_elements\n";
		
		# determine the indices of the "O"-elements of @cdn_val & write them to @index
		
			
		( @index )= grep { $cdn_val[$_] eq "O" } 0..$#cdn_val; #search from 1st to last element of @cdn_val
															   #for indices, [ ], with the null aminoacid, "O"
		print "Index : @index = 1 < aa position \n"; 		   
		
		$index = join (',', @index); #declared outside the loop because it will be used later
		
		#change @cdn_val to string, $cdn_strng, & push it & $cn_name to @cns
		
		$cdn_strng = join('',@cdn_val); 
		$cdn_strng_len = length $cdn_strng;
		
		push  @cns, ">$cn_name";
		push  @cns, "$cdn_strng"; #
		 
		print "\n the \$cdn_strng_len is $cdn_strng_len \n";
		
		} #closes while loop

##### REPLACE the amino acids in the peps in @seqs, which were encoded by CG-affected codons with
##### the null aa value, "O"
	
					 			
	foreach(@seqs){ 	
		
		$orth_n++; #number each orthologue
	  	
		while ($_ =~ m/>(.*?)<([a-z]|\*{1})(.*)/ig) {
		
		 $orth_name = ">$1_$orth_n";
		 										 
	  	 $orth_strng = "$2$3";
	  	 
	  	 $orth_strng =~ s/<//g; #remove < from $orth_strng, therefore $orth_string has a new value
  	 
	  	 my $orth_strng_len = length($orth_strng);
	  	 
	  	#USE MAP TO SUBSTITUE AA'S ENCODED BY CG-AFFECTED CODONS BY "O", USING @INDEX FOR POSITIONS 
	  		  	
	  		if ($orth_strng_len == $cdn_strng_len){ #make sure orth_pep equals cdn_strng_len
	  	
	  			my @subst_aa = map {substr $orth_strng, $_, 1, "O" } @index; 
	  		
	  			push @peps, "$orth_name"; #only add to \@peps if lengths match
	    		push @peps, "$orth_strng";	
	  			
	  			} #close if
	  	
	  	} #close while
	  	
	} #close foreach
	  
print "\n the number of orthologues in this file is $orth_n \n";
	
## GENERATE OUTPUT *.fst file

$msf_filename =~ m/(.*)_\w.*\.fst/; 

my $name = $1;						
	
	open (OUTPUT, ">$name-cg-null.fst");
								 
	foreach (@cns){	
	print OUTPUT "$_\n";
	}							 			
	foreach (@peps){	
	print OUTPUT "$_\n";
	}							 			
	
	close OUTPUT;
	
} #close foreach(@ARGV) at line 94	
							 
#subroutines	
 	
sub get_val{ #takes jj_cn seq, unpacks triplets,  passes them to a hash
			 #which returns an array of codon aa values
			 
my(%cg_less_code) = (
'TCA'=>'S', 'TCC'=>'S', 'TCG'=>'S', 'TCT'=>'S',
'TTC'=>'F', 'TTT'=>'F', 'TTA'=>'L', 'TTG'=>'L',
'TAC'=>'Y', 'TAT'=>'Y', 'TAA'=>'*', 'TAG'=>'*',
'TGC'=>'C', 'TGT'=>'C', 'TGA'=>'*', 'TGG'=>'W',
'CTA'=>'L', 'CTC'=>'L', 'CTG'=>'L', 'CTT'=>'L',
'CCA'=>'P', 'CCC'=>'P', 'CCG'=>'P', 'CCT'=>'P',
'CAC'=>'H', 'CAT'=>'H', 'CAA'=>'Q', 'CAG'=>'Q',
'CGA'=>'R', 'CGC'=>'R', 'CGG'=>'R', 'CGT'=>'R',
'ATA'=>'I', 'ATC'=>'I', 'ATT'=>'I', 'ATG'=>'M',
'ACA'=>'T', 'ACC'=>'T', 'ACG'=>'T', 'ACT'=>'T',
'AAC'=>'N', 'AAT'=>'N', 'AAA'=>'K', 'AAG'=>'K',
'AGC'=>'S', 'AGT'=>'S', 'AGA'=>'R', 'AGG'=>'R',
'GTA'=>'V', 'GTC'=>'V', 'GTG'=>'V', 'GTT'=>'V',
'GCA'=>'A', 'GCC'=>'A', 'GCG'=>'A', 'GCT'=>'A',
'GAC'=>'D', 'GAT'=>'D', 'GAA'=>'E', 'GAG'=>'E',
'GGA'=>'G', 'GGC'=>'G', 'GGG'=>'G', 'GGT'=>'G',
'JJA'=>'O', 'JJC'=>'O', 'JJG'=>'O', 'JJT'=>'O',
'AJJ'=>'O', 'CJJ'=>'O', 'GJJ'=>'O', 'TJJ'=>'O',
'JTA'=>'O', 'JTC'=>'O', 'JTG'=>'O', 'JTT'=>'O',
'JCA'=>'O', 'JCC'=>'O', 'JCG'=>'O', 'JCT'=>'O',
'JAC'=>'O', 'JAT'=>'O', 'JAA'=>'O', 'JAG'=>'O',
'JGA'=>'O', 'JGC'=>'O', 'JGG'=>'O', 'JGT'=>'O',
'TCJ'=>'S', 'TTJ'=>'F', 'TAJ'=>'Y', 'TGJ'=>'C',
'CTJ'=>'L', 'ATJ'=>'I', 'ACJ'=>'T', 'AAJ'=>'N',
'AGJ'=>'S', 'CCJ'=>'P', 'CAJ'=>'H', 'GTJ'=>'V',
'GCJ'=>'A',	'GAJ'=>'D', 'GGJ'=>'G', 
); #hash table CG-affected codons 


my @codons = unpack '(A3)*', $cn_jj; # generates array of codons to pass to the %cg_less_code hash

@cdn_val = map { exists $cg_less_code{$_} ? $cg_less_code{$_} : "X" } @codons; 

return @cdn_val;
}
